#! /usr/bin/env ruby
require 'pg'

@arguments = ARGV

CONNECTION = PG.connect(dbname:"expenses")

class ExpenseData

	def initialize
		@connection = PG.connect(dbname:"expenses")
	end

	def add_expense(amount, memo)
		date = Date.today
		sql = "INSERT INTO expenses (amount, memo, created_on) VALUES ($1, $2, $3);"
		params = [amount, memo, date]
		@connection.exec_params(sql, params)
	end

	def list
		result = @connection.exec("SELECT * FROM expenses ORDER BY created_on ASC;")
	
		display_result(result)
	end

	def search_expenses(query)
		sql = "SELECT * FROM expenses WHERE memo ILIKE $1"
		result = @connection.exec_params(sql, ["%#{query}%"])
		display_result(result)
	end

	private

	def display_result(result)
		result.each do |tuple|
			columns = [ tuple["id"].rjust(3),
						tuple["created_on"].rjust(10),
						tuple["amount"].rjust(12),
						tuple["memo"] ]
			puts columns.join(" | ")
		end
	end
end

class CLI

	def initialize
		@application = ExpenseData.new
	end

	def run(arguments)
		command = arguments.shift

		case command
		when "list" then @application.list
		when "add" 
			amount = arguments.shift
			memo = arguments.shift
			abort "You must provide an amount and memo." unless amount && memo
			@application.add_expense(amount, memo)
		when "search"
			query = arguments.shift
			abort "You must provide a search term." unless query
			@application.search_expenses(query)
		else help_content
		end
	end

	def help_content
		puts <<~HELP
			An expense recording system
	
			Commands:
	
			add AMOUNT MEMO [DATE] - record a new expense
			clear - delete all expenses
			list - list all expenses
			delete NUMBER - remove expense with id NUMBER
			search QUERY - list expenses with a matching memo field
		HELP
	end
end

CLI.new.run(ARGV)


